#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import sys
import os
import requests
import base64
import json
import subprocess
import re


def getSubscribeLink():
    '''
    本脚本的配置文件，目前的作用是仅存储用户输入的订阅地址，这样用户再次启动脚本时，就无需再输入订阅地址。
    预设的存储的路径为存储到用户的 HOME 内。
    '''
    subFilePath = os.path.expandvars('$HOME') + '/.v2sub.conf'
    # 获取订阅地址
    if not os.path.exists(subFilePath):
        open(subFilePath, 'w+')

    subFile = open(subFilePath, 'r')
    subLink = subFile.read().strip()
    subFile.close()

    if not subLink:
        print('您还没有输入订阅地址，请输入订阅地址。')
        subLink = input('订阅地址：')
        subFile = open(subFilePath, 'w+')
        subFile.write(subLink)
        subFile.close()
    else:
        if (re.search('[yesYES]', input('是否需要修改订阅地址?[y/N]'))):
            subLink = input('订阅地址：')
            subFile = open(subFilePath, 'w+')
            subFile.write(subLink)
            subFile.close()
        else:
            pass
        print('订阅地址：' + subLink)
        return subLink
    print('如果您的订阅地址有误，请删除或编辑 ' + subFilePath)
    return None


def base64StrFun(base64Str):
    '''
    解析base64字符串
    '''
    try:
        base64Str = base64.urlsafe_b64decode(base64Str)
    except:
        lens = len(base64Str)
        lenx = lens - (lens % 4 if lens % 4 else 4)
        base64Str = base64.b64decode(base64Str[:lenx])
    return base64Str


def parseVmess(nodeStr):
    '''
    解析Vmess协议节点
    '''
    nodeStr = base64StrFun(nodeStr)
    result = bytes.decode(nodeStr)
    return result


def parseSSR(nodeStr):
    '''
    解析SSR协议节点
    '''
    result = base64StrFun(nodeStr)
    result = bytes.decode(result)
    print(result)

    # 暂时不解析
    result = '{}'
    return result


def parseTrojan(nodeStr):
    '''
    解析Trojan协议节点
    '''
    result = base64StrFun(nodeStr)
    result = bytes.decode(result)
    print(result)
    return result


def getSubscribeNode(subscribeUrl):
    # 获取订阅地址
    subscribe_content = requests.get(subscribeUrl).text

    # 解析订阅地址内容
    try:
        result = base64StrFun(subscribe_content)
        # print(result)
        share_links = result.splitlines()

        # 解析vmess协议
        schemes_allow = ["trojan", 'vmess', 'ss', "ssr", 'socks']
        configs = []
        # print(share_links)
        for share_link in share_links[:len(share_links)-1]:
            share_link = bytes.decode(share_link)
            # print("share_link:[%s]"%share_link)
            url = share_link.split("://")
            # print("URL:[%s:%s]" % (url[0], url[1]))
            # 解析内容
            net = url[1]
            net = str.encode(net)

            # 解析协议
            scheme = url[0]
            if scheme == "trojan":
                nodeStr = parseTrojan(net)
            elif scheme == "ssr":
                nodeStr = parseSSR(net)
            elif scheme == "vmess":
                nodeStr = parseVmess(net)
            else:
                # pass
                nodeStr = base64StrFun(net)
                nodeStr = bytes.decode(nodeStr)
            # 加入json数组
            # print("nodeStr:[%s]" % nodeStr)
            configs.append(json.loads(nodeStr))
        return configs

    except Exception as e:
        print(e)
        # pass
    return None


def switchNode(serverListLink):
    # print("serverListLink:[%s]"%type(serverListLink))
    for i in range(len(serverListLink)):
        print("Node[%2s][%25s@%s:%s]"
              % (i, serverListLink[i]['ps'], serverListLink[i]['add'], serverListLink[i]['port']))
    while True:
        setServerNodeId = int(input("\n请输入要切换的节点编号："))
        print(serverListLink[setServerNodeId]['ps'] + serverListLink[setServerNodeId]['add'])
        subprocess.call(
            'ping ' + serverListLink[setServerNodeId]['add'] + ' -c 3 -w 10', shell=True)
        if re.search('[yesYES]', input('确定要使用该节点吗？[y/N] ')):
            break

    # 编辑 v2ray 配置文件
    v2rayConf = {
        "inbound": {
            "port": 1080,
            "listen": "127.0.0.1",
            "protocol": "socks",
            "settings": {
                "udp": True
            }
        },
        "outbound": {
            "protocol": "vmess",
            "settings": {
                "vnext": [{
                    "address": serverListLink[setServerNodeId]['add'],
                    "port": int(serverListLink[setServerNodeId]['port']),
                    "users": [{"id": serverListLink[setServerNodeId]['id']}]
                }]
            }
        },
        "outboundDetour": [{
            "protocol": "freedom",
            "tag": "direct",
            "settings": {}
        }],
        "routing": {
            "strategy": "rules",
            "settings": {
                "domainStrategy": "IPOnDemand",
                "rules": [{
                    "type": "field",
                    "ip": [
                        "0.0.0.0/8",
                    ],
                    "outboundTag": "direct"
                }]
            }
        }
    }
    # v2rayCfgPath = '/etc/v2ray/config.json'
    v2rayCfgPath = '/usr/local/etc/v2ray/config.json'
    if (not os.path.exists(v2rayCfgPath)):
        os.mkdir(os.path.abspath(os.path.dirname(v2rayCfgPath)))
    json.dump(v2rayConf, open(v2rayCfgPath, mode='a+'), indent=2)

    print("\n重启 v2ray 服务……\n")
    subprocess.call('systemctl restart v2ray.service', shell=True)
    print('地址切换完成')


if __name__ == "__main__":
    # 鉴权
    if os.geteuid() != 0:
        print("您需要切换到 Root 身份才可以使用本脚本。尝试在命令前加上 sudo?\n")
        exit()

    subLink = getSubscribeLink()
    if (subLink != None):
        print("\n开始从订阅地址中读取服务器节点… 如等待时间过久，请检查网络。\n")
        configs = getSubscribeNode(subLink)
        # print("configs:[%s]"%configs)
        if (configs != None):
            with open(".v2sub.conf.json", "w") as dump_f:
                # json.dump(configs, dump_f, ensure_ascii=True)
                json.dump(configs, dump_f, ensure_ascii=False)
            switchNode(configs)
        else:
            print("从订阅地址读取服务器节点失败")
    else:
        print("从文件中获取订阅地址失败")


